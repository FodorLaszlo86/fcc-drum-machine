{"version":3,"sources":["Components/Sounds.js","Components/Tab.js","Components/DrumPad.js","Components/Display.js","Components/PowerBtn.js","Components/BankSwitch.js","Components/VolumeCtrl.js","Components/DrumMachine.js","serviceWorker.js","index.js"],"names":["soundKitOne","trigger","name","url","soundKitTwo","Tab","props","tabSound","audioPlayOnClick","loudness","react_default","a","createElement","className","id","onClick","title","src","muted","volume","type","autoPlay","loop","DrumPad","_ref","tabNames","sounds","playAudio","tabs","map","tab","index","Components_Tab","key","Display","soundName","activeKit","currentVol","Math","floor","PowerBtn","powerSwitch","BankSwitch","changeKit","VolumeCtrl","min","max","step","onChange","volumeCtrl","value","volNow","DrumMachine","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","togglePower","event","bankOneBtn","document","getElementById","bankTwoBtn","setState","powerOn","state","activeSound","target","classList","toggle","remove","add","changeSoundKits","useSoundKit","bankOneActive","bankTwoActive","Array","from","includes","applyDrumPadEffectOnClick","hitPad","setTimeout","applyDrumPadEffectOnKeyPress","tabKeyPressed","playSoundOnClick","_this$state","bankOne","bankTwo","sound","childNodes","indexOf","play","playSoundOnKeyPress","_this$state2","pressedChar","String","fromCharCode","keyCode","toUpperCase","concat","selectedTab","parentElement","changeVolume","addEventListener","activeDrumPad","Components_DrumPad","Components_PowerBtn","Components_Display","Components_BankSwitch","Components_VolumeCtrl","Component","Boolean","window","location","hostname","match","ReactDOM","render","Components_DrumMachine","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAEaA,EAAc,CACvB,CACIC,QAAS,IACTC,KAAM,WACNC,IAAK,4DAGT,CACIF,QAAS,IACTC,KAAM,WACNC,IAAK,4DAGT,CACIF,QAAS,IACTC,KAAM,WACNC,IAAK,4DAGT,CACIF,QAAS,IACTC,KAAM,WACNC,IAAK,8DAGT,CACIF,QAAS,IACTC,KAAM,WACNC,IAAK,4DAGT,CACIF,QAAS,IACTC,KAAM,aACNC,IAAK,8DAGT,CACIF,QAAS,IACTC,KAAM,SACNC,IAAK,0DAGT,CACIF,QAAS,IACTC,KAAM,WACNC,IAAK,8DAGT,CACIF,QAAS,IACTC,KAAM,SACNC,IAAK,2DAKAC,EAAc,CACvB,CACIH,QAAS,IACTC,KAAM,UACNC,IAAK,2DAGT,CACIF,QAAS,IACTC,KAAM,UACNC,IAAK,2DAGT,CACIF,QAAS,IACTC,KAAM,UACNC,IAAK,2DAGT,CACIF,QAAS,IACTC,KAAM,kBACNC,IAAK,mEAGT,CACIF,QAAS,IACTC,KAAM,UACNC,IAAK,2DAGT,CACIF,QAAS,IACTC,KAAM,SACNC,IAAK,2DAGT,CACIF,QAAS,IACTC,KAAM,gBACNC,IAAK,iEAGT,CACIF,QAAS,IACTC,KAAM,aACNC,IAAK,gEAGT,CACIF,QAAS,IACTC,KAAM,UACNC,IAAK,4DC1FEE,EAnBH,SAAAC,GAAS,IACXC,EAAyCD,EAAzCC,SAAUC,EAA+BF,EAA/BE,iBAAkBC,EAAaH,EAAbG,SAClC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,GAAKP,EAASL,KAAOa,QAAUP,GAClDF,EAAMU,MACTN,EAAAC,EAAAC,cAAA,SACIK,IAAMV,EAASJ,IACfW,GAAKR,EAAMQ,GACXD,UAAU,OACVK,OAAQ,EACRC,OAASV,EACTW,KAAK,aACLC,UAAW,EACXC,MAAO,MCORC,EAlBC,SAAAC,GAA+C,IAA5CC,EAA4CD,EAA5CC,SAAUC,EAAkCF,EAAlCE,OAAQC,EAA0BH,EAA1BG,UAAWlB,EAAee,EAAff,SACtCmB,EAAOH,EAASI,IAAI,SAACC,EAAKC,GAAN,OACVrB,EAAAC,EAAAC,cAACoB,EAAD,CACIlB,GAAKgB,EACLd,MAAQc,EACRG,IAAMF,EACNxB,SAAWmB,EAAOK,GAClBvB,iBAAmBmB,EACnBlB,SAAUA,MAG9B,OACIC,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACHc,ICHEM,EAZC,SAAAV,GAA0C,IAAvCW,EAAuCX,EAAvCW,UAAWC,EAA4BZ,EAA5BY,UAAWC,EAAiBb,EAAjBa,WACrC,OACI3B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUD,UAAU,WACxBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,oBAAoBD,UAAU,sBAAuBuB,GAC7D1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,QAAwCyB,KAAKC,MAAmB,IAAbF,KAEvD3B,EAAAC,EAAAC,cAAA,OAAKE,GAAG,qBAAqBD,UAAU,oBAAqBsB,KCLzDK,EAFE,SAAClC,GAAD,OAAWI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBC,GAAG,WAAWC,QAAUT,EAAMmC,aAA5D,uBCsBbC,EAtBI,SAAAlB,GAAmB,IAAhBmB,EAAgBnB,EAAhBmB,UAClB,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBE,QAAU4B,GAE1CjC,EAAAC,EAAAC,cAAA,UACKE,GAAG,UACHD,UAAU,aAFf,YAOAH,EAAAC,EAAAC,cAAA,UACIE,GAAG,UACHD,UAAU,aAFd,cCHG+B,EARI,SAAAtC,GACf,OACII,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WACJJ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,QAAQyB,IAAI,IAAIC,IAAI,IAAIC,KAAK,OAAOC,SAAW1C,EAAM2C,WAAaC,MAAO5C,EAAM6C,WC2LxFC,cAtLb,SAAAA,EAAY9C,GAAO,IAAA+C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlD,KAiBRsD,YAAc,SAAAC,GAEZ,IAAMC,EAAcC,SAASC,eAAe,WACtCC,EAAcF,SAASC,eAAe,WAE1CX,EAAKa,SAAS,CACZC,SAAUd,EAAKe,MAAMD,QACrBE,YAAa,GACbjC,UAAW,YAGfyB,EAAMS,OAAOC,UAAUC,OAAO,YAE3BnB,EAAKe,MAAMD,SACZL,EAAWS,UAAUE,OAAO,qBAC5BR,EAAWM,UAAUE,OAAO,sBAE5BX,EAAWS,UAAUG,IAAI,sBAnCVrB,EAyCnBsB,gBAAkB,SAAAd,GAChB,IAAMe,EAAcf,EAAMS,OAAOxD,GAC3B+D,EAAiBd,SAASC,eAAe,WACzCc,EAAiBf,SAASC,eAAe,WAE5CX,EAAKe,MAAMD,UAEZd,EAAKa,SAAS,CACZ9B,UAAWwC,EACXP,YAAa,KAGa,YAAzBhB,EAAKe,MAAMhC,WAA4B2C,MAAMC,KAAKH,EAAcN,WAAWU,SAAS,sBAIrFH,EAAcP,UAAUG,IAAI,qBAC5BG,EAAcN,UAAUE,OAAO,uBAJ/BI,EAAcN,UAAUG,IAAI,qBAC5BI,EAAcP,UAAUE,OAAO,wBAvDlBpB,EA+DnB6B,0BAA4B,SAAArB,GAC1B,IAAMsB,EAAStB,EAAMS,OACrBa,EAAOZ,UAAUG,IAAI,iBACrBU,WAAW,WACTD,EAAOZ,UAAUE,OAAO,kBACvB,KApEcpB,EAuEnBgC,6BAA+B,SAAAC,GAC7BA,EAAcf,UAAUG,IAAI,iBAC5BU,WAAW,WACTE,EAAcf,UAAUE,OAAO,kBAC9B,KA3EcpB,EA+EnBkC,iBAAmB,SAAC1B,GAClB,GAAGR,EAAKe,MAAMD,QAAS,KAIjBhC,EAJiBqD,EAC2BnC,EAAKe,MAA/C3C,EADe+D,EACf/D,SAAUgE,EADKD,EACLC,QAASC,EADJF,EACIE,QAAStD,EADboD,EACapD,UAC9BuD,EAAQ9B,EAAMS,OAAOsB,WAAW,GAChC7D,EAAQN,EAASoE,QAAQF,EAAM7E,IAIjCqB,EADe,YAAdC,EACWqD,EAAQ1D,GAAO7B,KAEfwF,EAAQ3D,GAAO7B,KAG7BmD,EAAKa,SAAS,CACZG,YAAalC,IAGfkB,EAAK6B,0BAA0BrB,GAE/B8B,EAAMG,SAlGSzC,EAsGnB0C,oBAAsB,SAAClC,GACrB,GAAGR,EAAKe,MAAMD,QAAS,KAAA6B,EAC2B3C,EAAKe,MAA/C3C,EADeuE,EACfvE,SAAUgE,EADKO,EACLP,QAASC,EADJM,EACIN,QAAStD,EADb4D,EACa5D,UAC5B6D,EAAcC,OAAOC,aAAatC,EAAMuC,SAASC,cAGjDV,EAAQ5B,SAASC,eAAT,GAAAsC,OAA2BL,IAEzC,GAAGN,EAAO,CACR,IAGIxD,EAHEJ,EAAQN,EAASoE,QAAQF,EAAM7E,IAC/ByF,EAAcxC,SAASC,eAAT,GAAAsC,OAA2B7E,EAASM,KAAUyE,cAKhErE,EADe,YAAdC,EACWqD,EAAQ1D,GAAO7B,KAEfwF,EAAQ3D,GAAO7B,KAG7BmD,EAAKa,SAAS,CACZG,YAAalC,IAGfkB,EAAKgC,6BAA6BkB,GAElCZ,EAAMG,UAhIOzC,EAqInBoD,aAAe,SAAC5C,GACXR,EAAKe,MAAMD,SACZd,EAAKa,SAAS,CACZ/C,OAAQ0C,EAAMS,OAAOpB,SArIzBG,EAAKe,MAAQ,CACXC,YAAa,GACbF,SAAS,EACT/B,UAAW,UACXX,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACnDgE,QAASzF,EACT0F,QAAStF,EACTe,OAAQ,KAVOkC,mFAejBU,SAAS2C,iBAAiB,WAAYlD,KAAKuC,sDAgI3C,IAAIY,EAiBJ,OAfGA,EADyB,YAAzBnD,KAAKY,MAAMhC,UACK1B,EAAAC,EAAAC,cAACgG,EAAD,CACKnF,SAAW+B,KAAKY,MAAM3C,SACtBC,OAAS8B,KAAKY,MAAMqB,QACpB9D,UAAY6B,KAAK+B,iBACjB9E,SAAW+C,KAAKY,MAAMjD,SAG5BT,EAAAC,EAAAC,cAACgG,EAAD,CACMnF,SAAW+B,KAAKY,MAAM3C,SACtBC,OAAS8B,KAAKY,MAAMsB,QACpB/D,UAAY6B,KAAK+B,iBACjB9E,SAAW+C,KAAKY,MAAMjD,SAK5CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,GAAG,gBAEtBJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,eACTJ,EAAAC,EAAAC,cAAA,MAAIE,GAAG,cAAP,oBACAJ,EAAAC,EAAAC,cAACiG,EAAD,CAAUpE,YAAce,KAAKI,eAG/BlD,EAAAC,EAAAC,cAAA,WAASE,GAAG,sBACR6F,EACFjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACkG,EAAD,CAAS3E,UAAWqB,KAAKY,MAAMC,YAAajC,UAAYoB,KAAKY,MAAMhC,UAAYC,WAAamB,KAAKY,MAAMjD,SACvGT,EAAAC,EAAAC,cAACmG,EAAD,CAAYpE,UAAYa,KAAKmB,kBAC7BjE,EAAAC,EAAAC,cAACoG,EAAD,CAAY/D,WAAaO,KAAKiD,aAAetD,OAASK,KAAKY,MAAMjD,mBA9KnD8F,aCGNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9G,EAAAC,EAAAC,cAAC6G,EAAD,MAAiB1D,SAASC,eAAe,SD2HnD,kBAAmB0D,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.feb2cdb8.chunk.js","sourcesContent":["\n\nexport const soundKitOne = [\n    {\n        trigger: 'q',\n        name: 'Heater-1',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' \n    },\n\n    {\n        trigger: 'w',\n        name: 'Heater-2',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3' \n    },\n\n    {\n        trigger: 'e',\n        name: 'Heater-3',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3' \n    },\n\n    {\n        trigger: 'a',\n        name: 'Heater-4',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' \n    },\n\n    {\n        trigger: 's',\n        name: 'Heater-6',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' \n    },\n\n    {\n        trigger: 'd',\n        name: 'Kick-n-Hat',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' \n    },\n\n    {\n        trigger: 'z',\n        name: 'DSC-Oh',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' \n    },\n\n    {\n        trigger: 'x',\n        name: 'PR4-Kick',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3' \n    },\n\n    {\n        trigger: 'c',\n        name: 'Cev-H2',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' \n    }\n]\n\n\nexport const soundKitTwo = [\n    {\n        trigger: 'q',\n        name: 'Chord-1',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3' \n    },\n\n    {\n        trigger: 'w',\n        name: 'Chord-2',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3' \n    },\n\n    {\n        trigger: 'e',\n        name: 'Chord-3',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3' \n    },\n\n    {\n        trigger: 'a',\n        name: 'Give-Us-A-Light',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3' \n    },\n\n    {\n        trigger: 's',\n        name: 'Dry-Ohh',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3' \n    },\n\n    {\n        trigger: 'd',\n        name: 'BLD-H1',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3 ' \n    },\n\n    {\n        trigger: 'z',\n        name: 'Punchy-Kick-1',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3' \n    },\n\n    {\n        trigger: 'x',\n        name: 'Side-Stick',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3' \n    },\n\n    {\n        trigger: 'c',\n        name: 'BRK-SNR',\n        url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3' \n    }\n]","import React from 'react';\n\nconst Tab = props => {\n    let { tabSound, audioPlayOnClick, loudness } = props;\n    return (\n        <div className='drum-pad' id={ tabSound.name } onClick={ audioPlayOnClick }>\n            {  props.title }\n            <audio \n                src={ tabSound.url }\n                id={ props.id } \n                className='clip' \n                muted={ false }\n                volume={ loudness } \n                type='audio/mpeg'\n                autoPlay={ false }\n                loop={ false } \n            />\n        </div>\n    )\n}\n\nexport default Tab;","import React from 'react';\nimport Tab from './Tab';\n\n\nconst DrumPad = ({ tabNames, sounds, playAudio, loudness }) => {\n    const tabs = tabNames.map((tab, index) => \n                    <Tab \n                        id={ tab } \n                        title={ tab } \n                        key={ index } \n                        tabSound={ sounds[index] } \n                        audioPlayOnClick={ playAudio } \n                        loudness={loudness}\n                    />\n                );\n    return (\n        <div id='drum-pad'>\n           { tabs }\n        </div>\n    )\n}\n\nexport default DrumPad;","import React from 'react';\n\nconst Display = ({ soundName, activeKit, currentVol }) => {\n    return (\n        <div id='display' className='display'>\n            <div className='display__secondary'>\n                <div id='activekit-display' className='display__activekit'>{ activeKit }</div>\n                <div className='display__volume'>Vol: { Math.floor(currentVol * 100) }</div>\n            </div>\n            <div id=\"display-sound-name\" className='display__primary'>{ soundName }</div>\n        </div>\n    )\n}\n\nexport default Display;","import React from 'react';\n\nconst PowerBtn = (props) => <i className=\"material-icons\" id=\"powerBtn\" onClick={ props.powerSwitch }>power_settings_new</i>\n\nexport default PowerBtn;","import React from 'react';\n\nconst BankSwitch = ({ changeKit }) => {\n    return (\n        <div className=\"bank-switch__panel\" onClick={ changeKit } >\n\n            <button\n                 id='bankOne' \n                 className='bank__btn'\n                >\n                Bank One\n            </button>\n\n            <button\n                id='bankTwo' \n                className='bank__btn'\n                >\n                Bank Two\n            </button>\n\n        </div>\n    )\n}\n\nexport default BankSwitch;","import React from 'react';\n\nconst VolumeCtrl = props => {\n    return (\n        <div id=\"volCtrl\">\n            <input type='range' min='0' max='1' step='0.01' onChange={ props.volumeCtrl } value={props.volNow} />\n        </div>\n    )\n}\n\nexport default VolumeCtrl;","import React, { Component } from 'react';\nimport { soundKitOne, soundKitTwo } from './Sounds';\nimport DrumPad from './DrumPad';\nimport Display from './Display';\nimport PowerBtn from './PowerBtn';\nimport BankSwitch from './BankSwitch';\nimport VolumeCtrl from './VolumeCtrl';\n\n\nclass DrumMachine extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      activeSound: '',\n      powerOn: false,\n      activeKit: 'bankOne',\n      tabNames: ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'],\n      bankOne: soundKitOne,\n      bankTwo: soundKitTwo,\n      volume: 0.62\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('keypress', this.playSoundOnKeyPress);\n  }\n\n  togglePower = event => {\n\n    const bankOneBtn =  document.getElementById('bankOne');\n    const bankTwoBtn =  document.getElementById('bankTwo');\n\n      this.setState({\n        powerOn: !this.state.powerOn,\n        activeSound: '',\n        activeKit: 'bankOne'\n      })\n\n    event.target.classList.toggle('power-on')\n\n    if(this.state.powerOn) {\n      bankOneBtn.classList.remove('bank__btn--active');\n      bankTwoBtn.classList.remove('bank__btn--active');\n    } else {\n      bankOneBtn.classList.add('bank__btn--active');\n    }\n\n  }\n\n\n  changeSoundKits = event => {\n    const useSoundKit = event.target.id;\n    const bankOneActive =  document.getElementById('bankOne');\n    const bankTwoActive =  document.getElementById('bankTwo');\n\n    if(this.state.powerOn) {\n\n      this.setState({\n        activeKit: useSoundKit,\n        activeSound: ''\n      })\n\n      if(this.state.activeKit === 'bankTwo' && !Array.from(bankOneActive.classList).includes('bank__btn--active')) {\n        bankOneActive.classList.add('bank__btn--active');\n        bankTwoActive.classList.remove('bank__btn--active');\n      } else {\n        bankTwoActive.classList.add('bank__btn--active');\n        bankOneActive.classList.remove('bank__btn--active');\n      }\n    } \n  }\n\n  applyDrumPadEffectOnClick = event => {\n    const hitPad = event.target;\n    hitPad.classList.add('hit-pad-style');\n    setTimeout(() => {\n      hitPad.classList.remove('hit-pad-style');\n    }, 50)\n  }\n\n  applyDrumPadEffectOnKeyPress = tabKeyPressed => {\n    tabKeyPressed.classList.add('hit-pad-style');\n    setTimeout(() => {\n      tabKeyPressed.classList.remove('hit-pad-style');\n    }, 50)\n  }\n\n\n  playSoundOnClick = (event) => {\n    if(this.state.powerOn) {\n      let { tabNames, bankOne, bankTwo, activeKit } = this.state;\n      let sound = event.target.childNodes[1];\n      let index = tabNames.indexOf(sound.id);\n      let soundName;\n      // get the current sound's name\n      if(activeKit === 'bankOne') {\n        soundName = bankOne[index].name;\n      } else {\n        soundName = bankTwo[index].name;\n      }\n\n      this.setState({\n        activeSound: soundName\n      })\n\n      this.applyDrumPadEffectOnClick(event);\n\n      sound.play();\n    }\n  }\n\n  playSoundOnKeyPress = (event) => {\n    if(this.state.powerOn) {\n      let { tabNames, bankOne, bankTwo, activeKit } = this.state;\n      const pressedChar = String.fromCharCode(event.keyCode).toUpperCase();\n\n      // get the audio element to trigger with the keypress\n      const sound = document.getElementById(`${pressedChar}`);\n      // get the index of the pressed element\n      if(sound) {\n        const index = tabNames.indexOf(sound.id);\n        const selectedTab = document.getElementById(`${tabNames[index]}`).parentElement;\n        // get the name of the pressed sound\n        let soundName;\n        // update state with the currently pressed sound's name\n        if(activeKit === 'bankOne') {\n          soundName = bankOne[index].name;\n        } else {\n          soundName = bankTwo[index].name;\n        }\n        \n        this.setState({\n          activeSound: soundName\n        })\n        \n        this.applyDrumPadEffectOnKeyPress(selectedTab);\n        // play sound if exist i.e sound is not null\n        sound.play();\n      }\n    }\n  }\n\n  changeVolume = (event) => {\n    if(this.state.powerOn) {\n      this.setState({\n        volume: event.target.value\n      })\n    }\n  }\n\n  render() {\n\n    let activeDrumPad;\n    if(this.state.activeKit === 'bankOne') {\n       activeDrumPad = <DrumPad \n                            tabNames={ this.state.tabNames } \n                            sounds={ this.state.bankOne } \n                            playAudio={ this.playSoundOnClick }\n                            loudness={ this.state.volume } \n                      /> \n    } else {\n      activeDrumPad = <DrumPad \n                            tabNames={ this.state.tabNames } \n                            sounds={ this.state.bankTwo } \n                            playAudio={ this.playSoundOnClick } \n                            loudness={ this.state.volume }\n                      />\n    }\n\n    return (\n      <div className=\"App\" id='drum-machine'>\n\n        <header id=\"app__header\">\n          <h1 id='app__title'>FCC Drum Machine</h1>\n          <PowerBtn powerSwitch={ this.togglePower } />\n        </header>\n\n        <section id=\"drum-machine__body\">\n          { activeDrumPad }\n          <div className='drum-machine__display'>\n            <Display soundName={this.state.activeSound} activeKit={ this.state.activeKit } currentVol={ this.state.volume }/>\n            <BankSwitch changeKit={ this.changeSoundKits } />\n            <VolumeCtrl volumeCtrl={ this.changeVolume } volNow={ this.state.volume } />\n          </div>\n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default DrumMachine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport DrumMachine from './Components/DrumMachine';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}